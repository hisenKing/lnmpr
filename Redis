###### 为什么是单线程

Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 瓶颈最有可能是内存或网络。多线程会有共享资源的并发访问控制问题，为了避免这些问题，Redis 采用了单线程的模式，而且采用单线程对于 Redis 的内部实现的复杂度大大降低

###### 单线程为什么快

1. Redis 大部分操作是在内存上完成，并且采用了高效的数据结构如哈希表和跳表
2. Redis 采用多路复用，能保证在网络 IO 中可以并发处理大量的客户端请求，实现高吞吐率

###### 持久化机制

AOF和RDB

AOF appendfsync: Always, EVerySec,No,AOF是在主线程中执行

AOF 重写机制，子进程gbrewriteaof来完成，一个拷贝，两处日志

RDB save和bgsave, save在主线程执行，会导致阻塞；bgsave创建子进程，避免主线程阻塞

混合使用 AOF 日志和内存快照的方法

###### 缓存异常

1. 缓存中的数据和数据库中的不一致

删除缓存值或更新数据库失败而导致数据不一致，你可以使用重试机制确保删除或更新操作成功。
在删除缓存值、更新数据库的这两步操作中，有其他线程的并发读操作，导致其他线程读取到旧值，应对方案是延迟双删。

无并发情况，使用队列进行操作，
有并发，分先更新数据库，还是先更新缓存

先更新数据库，再删除缓存，并发情况下，多少有不一致情况存在

建议先更新数据库再删除缓存

2. 缓存雪崩

   大量缓存数据同时过期；

   ​     微调过期时间；

   ​     核心数据读数据库，非核心数据返回预定义信息，空值，错误信息

   发生雪崩了怎么处理：

   ​     服务熔断

   ​     请求限流

   预防雪崩：

   ​    主从节点redis集群

3. 缓存击穿

   热点数据无法在缓存中处理，经常发生在热点数据过期

   不设置过期时间，使用脚本定时更新数据

4. 缓存穿透

​       数据不在缓存中

​       如何应对：

​            缓存空值或缺省值

​           使用布隆过滤器快速判断数据是否存在

###### 主从数据同步

​      流程：从实例执行saveof 172.16.19.3 -> 建立连接，协商同步->主实例执行bgsave，生成RDB，发送RDB文件给从库->从库请客现有数据，加载RDB->主实例发送repl buffer->从实例加载repl buffer

​     网络中断

​            repl_backlog_buffer

​            repl_backlog_size， save_backlog_size



###### 哨兵机制

​     监控，选主，通知

​    监控：“客观下线”的标准就是，当有 N 个哨兵实例时，最好要有 N/2 + 1 个实例判断主库为“主观下线”

​     选主：哨兵会按照在线状态、网络状态，筛选过滤掉一部分不符合要求的从库，然后，依次按照优先级、复制进度、ID 号大小再对剩余的从库进行打分，只要有得分最高的从库出现，就把它选为新主库

​    通过 pub/sub 机制，哨兵之间可以组成集群，同时，哨兵又通过 INFO 命令，获得了从库连接信息，也能和从库建立连接，并进行监控了。

​    要保证所有哨兵实例的配置是一致的，尤其是主观下线的判断值 down-after-milliseconds

​    任何一个想成为 Leader 的哨兵，要满足两个条件：第一，拿到半数以上的赞成票；第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值



###### 切片集群



###### 内存淘汰策略

不进行数据淘汰的策略，只有 noeviction 这一种

在设置了过期时间的数据中进行淘汰，包括 volatile-random、volatile-ttl、volatile-lru、volatile-lfu（Redis 4.0 后新增）四种。

在所有数据范围内进行淘汰，包括 allkeys-lru、allkeys-random、allkeys-lfu（Redis 4.0 后新增）三种。

volatile-ttl 在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。volatile-random 就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。

volatile-lru 会使用 LRU 算法筛选设置了过期时间的键值对。

volatile-lfu 会使用 LFU 算法选择设置了过期时间的键值对

allkeys-random 策略，从所有键值对中随机选择并删除数据；

allkeys-lru 策略，使用 LRU 算法在所有数据中进行筛选。

allkeys-lfu 策略，使用 LFU 算法在所有数据中进行筛选。
